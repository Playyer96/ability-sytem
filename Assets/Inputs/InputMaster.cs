//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Inputs/InputMaster.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMaster : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMaster()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMaster"",
    ""maps"": [
        {
            ""name"": ""AbilitySystem"",
            ""id"": ""8b5d4544-7c26-4693-a85e-fca152da4830"",
            ""actions"": [
                {
                    ""name"": ""FirstAbility"",
                    ""type"": ""Button"",
                    ""id"": ""638116bc-8366-42de-b884-21dd669ab92a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondAbility"",
                    ""type"": ""Button"",
                    ""id"": ""c474a5b1-6b79-4f3a-99ef-d70aca250af1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ThirdAbility"",
                    ""type"": ""Button"",
                    ""id"": ""c41a1fa3-511b-4d2d-81ec-3fc1dc3ccc83"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FourthAbility"",
                    ""type"": ""Button"",
                    ""id"": ""7ce9a982-859a-4012-94b0-dd7f36cd1de9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d7687e58-4623-4441-9caf-2e3c750b43eb"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""FirstAbility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""77fb7f26-cde4-4cc4-99d1-5f6816d29053"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""SecondAbility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""21f31310-e213-43c1-85ba-544df4600106"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ThirdAbility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dea4dbc3-3efd-4a7c-aef1-f52237e7a111"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""FourthAbility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // AbilitySystem
        m_AbilitySystem = asset.FindActionMap("AbilitySystem", throwIfNotFound: true);
        m_AbilitySystem_FirstAbility = m_AbilitySystem.FindAction("FirstAbility", throwIfNotFound: true);
        m_AbilitySystem_SecondAbility = m_AbilitySystem.FindAction("SecondAbility", throwIfNotFound: true);
        m_AbilitySystem_ThirdAbility = m_AbilitySystem.FindAction("ThirdAbility", throwIfNotFound: true);
        m_AbilitySystem_FourthAbility = m_AbilitySystem.FindAction("FourthAbility", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // AbilitySystem
    private readonly InputActionMap m_AbilitySystem;
    private IAbilitySystemActions m_AbilitySystemActionsCallbackInterface;
    private readonly InputAction m_AbilitySystem_FirstAbility;
    private readonly InputAction m_AbilitySystem_SecondAbility;
    private readonly InputAction m_AbilitySystem_ThirdAbility;
    private readonly InputAction m_AbilitySystem_FourthAbility;
    public struct AbilitySystemActions
    {
        private @InputMaster m_Wrapper;
        public AbilitySystemActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @FirstAbility => m_Wrapper.m_AbilitySystem_FirstAbility;
        public InputAction @SecondAbility => m_Wrapper.m_AbilitySystem_SecondAbility;
        public InputAction @ThirdAbility => m_Wrapper.m_AbilitySystem_ThirdAbility;
        public InputAction @FourthAbility => m_Wrapper.m_AbilitySystem_FourthAbility;
        public InputActionMap Get() { return m_Wrapper.m_AbilitySystem; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AbilitySystemActions set) { return set.Get(); }
        public void SetCallbacks(IAbilitySystemActions instance)
        {
            if (m_Wrapper.m_AbilitySystemActionsCallbackInterface != null)
            {
                @FirstAbility.started -= m_Wrapper.m_AbilitySystemActionsCallbackInterface.OnFirstAbility;
                @FirstAbility.performed -= m_Wrapper.m_AbilitySystemActionsCallbackInterface.OnFirstAbility;
                @FirstAbility.canceled -= m_Wrapper.m_AbilitySystemActionsCallbackInterface.OnFirstAbility;
                @SecondAbility.started -= m_Wrapper.m_AbilitySystemActionsCallbackInterface.OnSecondAbility;
                @SecondAbility.performed -= m_Wrapper.m_AbilitySystemActionsCallbackInterface.OnSecondAbility;
                @SecondAbility.canceled -= m_Wrapper.m_AbilitySystemActionsCallbackInterface.OnSecondAbility;
                @ThirdAbility.started -= m_Wrapper.m_AbilitySystemActionsCallbackInterface.OnThirdAbility;
                @ThirdAbility.performed -= m_Wrapper.m_AbilitySystemActionsCallbackInterface.OnThirdAbility;
                @ThirdAbility.canceled -= m_Wrapper.m_AbilitySystemActionsCallbackInterface.OnThirdAbility;
                @FourthAbility.started -= m_Wrapper.m_AbilitySystemActionsCallbackInterface.OnFourthAbility;
                @FourthAbility.performed -= m_Wrapper.m_AbilitySystemActionsCallbackInterface.OnFourthAbility;
                @FourthAbility.canceled -= m_Wrapper.m_AbilitySystemActionsCallbackInterface.OnFourthAbility;
            }
            m_Wrapper.m_AbilitySystemActionsCallbackInterface = instance;
            if (instance != null)
            {
                @FirstAbility.started += instance.OnFirstAbility;
                @FirstAbility.performed += instance.OnFirstAbility;
                @FirstAbility.canceled += instance.OnFirstAbility;
                @SecondAbility.started += instance.OnSecondAbility;
                @SecondAbility.performed += instance.OnSecondAbility;
                @SecondAbility.canceled += instance.OnSecondAbility;
                @ThirdAbility.started += instance.OnThirdAbility;
                @ThirdAbility.performed += instance.OnThirdAbility;
                @ThirdAbility.canceled += instance.OnThirdAbility;
                @FourthAbility.started += instance.OnFourthAbility;
                @FourthAbility.performed += instance.OnFourthAbility;
                @FourthAbility.canceled += instance.OnFourthAbility;
            }
        }
    }
    public AbilitySystemActions @AbilitySystem => new AbilitySystemActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IAbilitySystemActions
    {
        void OnFirstAbility(InputAction.CallbackContext context);
        void OnSecondAbility(InputAction.CallbackContext context);
        void OnThirdAbility(InputAction.CallbackContext context);
        void OnFourthAbility(InputAction.CallbackContext context);
    }
}
